_clearfile() {
    echo "Are you sure you want to clear $1? (y/n)"
    read choice
    if [[ "$choice" == "y" ]]; then
        sudo truncate -s 0 "$1"
        echo "File $1 cleared."
    else
        echo "Aborted."
    fi
}

_deldir() {
    #-- check if param1 provided as a directory_name?
    if [[ -z "$1" ]]; then
        echo "Usage: deldir <directory_name>"
        return 1
    fi

    #-- check if the directory exists
    if [[ ! -d "$1" ]]; then
        echo "Error: Directory '$1' does not exist."
        return 1
    fi

    #-- confirm deletion
    echo -n "Are you sure you want to delete the directory '$1'? (y/N): "
    read confirm
    case "$confirm" in
        [yY][eE][sS]|[yY])  # Accept 'yes', 'Yes', 'Y', 'y'
            rm -r "$1" && echo "Directory '$1' has been deleted."
            ;;
        *)
            echo "Deletion canceled."
            ;;
    esac
}

_delfile() {
    rm -i "$1" && echo "File $1 deleted.";
}

_docker_run_mysql() {
    #-- check if param1 provided as mysql_version?
    if [[ -z "$1" ]]; then
        echo "Usage: dmysql <mysql_version>"
        echo "example: dmysql 8.0 | dmysql latest"
        return 1
    fi

    docker run --name mysql-local -e MYSQL_ROOT_PASSWORD=root -e MYSQL_USER=localuser -e MYSQL_PASSWORD=test1234 -p 3306:3306 -d mysql:$1
}

_docker_run_postgresql() {
    #-- check if param1 provided as postgresql_version?
    if [[ -z "$1" ]]; then
        echo "Usage: dpostgresql <postgresql_version>"
        echo "example: dpostgresql 8.0 | dpostgresql latest"
        return 1
    fi

    docker run --name postgresql-local -e POSTGRESQL_USERNAME=postgres -e POSTGRESQL_PASSWORD=test1234 -p 5432:5432 -v postgres_data:/bitnami/postgresql -d bitnami/postgresql:$1
}

# EZA: File/Folder view switching list or grid based file count
# Hardcode the limit to 10 file & folder
# <=10 show as a list, >10 show as grid
_dynamic_view() {
    local dir_path=${1:-.}  #-- use the provided directory path, or default to the current directory
    local item_count

    #-- check if the directory exists
    if [[ ! -d "$dir_path" ]]; then
        echo "Error: '$dir_path' is not a valid directory."
        return 1
    fi

    #-- get the first 11 items and count them
    item_count=$(find "$dir_path" -maxdepth 1 -mindepth 1 | head -n 11 | wc -l)

    if (( item_count < 10 )); then
        eza -aahlom --icons --color=auto --sort=Name --group-directories-first --color-scale=all "$dir_path" # List
    else
        eza -aahloGm --icons --color=auto --sort=Name --group-directories-first --color-scale=all "$dir_path" # Grid
    fi
}

_fzf_git_branch() {
    git branch --all | fzf --preview="git log --oneline --graph {}";
}

_git_push_new() {
  if [ -z "$1" ]; then
    echo "Usage: gitpushnew <github-repo-url>";
    return 1;
  fi;
  git init &&
  git add . &&
  git commit -m "Initial commit" &&
  git branch -M main &&
  git remote add origin "$1" &&
  git pull origin main &&
  git push -u origin main;
}

_init_vite() {
  #-- set the folder name to the first parameter or the current directory if not provided
  local folder=${1:-.}

  #-- set the template to the second parameter or default to 'vue-ts'
  local template=${2:-vue-ts}

  npm create vite@latest "$folder" -- --template "$template"
}

_makedir() {
    mkdir -p "$1" && cd "$1";
}

_versions() {
    echo "Bun: $(bun -v)"
    echo "Git: $(git -v)"
    echo "Go: $(go version)"
    echo "Java: $(java --version)"
    echo "NVM: $(nvm -v)"
    echo "NPM: $(npm -v)"
    echo "Node.js: $(node -v)"
    echo "Python: $(python3 --version)"
    echo "Redis: $(redis-cli --version)"
    echo "\n --- Tools needed for mobile development ---"
    echo "Adb: $(adb --version) \n"
    echo "Cocopods: $(pod --version)"
    echo "Fastboot: $(fastboot --version) \n"
    echo "Ionic: $(ionic --version)"
    echo "\n --- Tools needed for PHP ---"
    echo "Composer: $(composer --version) \n"
}
