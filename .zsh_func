_alias_search() {
    local selection=$(alias | fzf --preview "echo {}")
    (eval "$selection")
}

_clearfile() {
    echo "Are you sure you want to clear $1? (y/n)"
    read choice
    if [[ "$choice" == "y" ]]; then
        sudo truncate -s 0 "$1"
        echo "File $1 cleared."
    else
        echo "Aborted."
    fi
}

_deldir() {
    #-- check if param1 provided as a directory_name?
    if [[ -z "$1" ]]; then
        echo "Usage: deldir <directory_name>"
        return 1
    fi

    #-- check if the directory exists
    if [[ ! -d "$1" ]]; then
        echo "Error: Directory '$1' does not exist."
        return 1
    fi

    #-- confirm deletion
    echo -n "Are you sure you want to delete the directory '$1'? (y/N): "
    read confirm
    case "$confirm" in
        [yY][eE][sS]|[yY])  # Accept 'yes', 'Yes', 'Y', 'y'
            rm -r "$1" && echo "Directory '$1' has been deleted."
            ;;
        *)
            echo "Deletion canceled."
            ;;
    esac
}

_delfile() {
    rm -i "$1" && echo "File $1 deleted.";
}

_docker_run_mysql() {
    #-- check if param1 provided as mysql_version?
    if [[ -z "$1" ]]; then
        echo "Usage: dmysql <mysql_version>"
        echo "example: dmysql 8.0 | dmysql latest"
        return 1
    fi

    docker run --name mysql-local -e MYSQL_ROOT_PASSWORD=root -e MYSQL_USER=localuser -e MYSQL_PASSWORD=test1234 -p 3306:3306 -d mysql:$1
}

_docker_run_postgresql() {
    #-- check if param1 provided as postgresql_version?
    if [[ -z "$1" ]]; then
        echo "Usage: dpostgresql <postgresql_version>"
        echo "example: dpostgresql 8.0 | dpostgresql latest"
        return 1
    fi

    docker run --name postgresql-local -e POSTGRESQL_USERNAME=postgres -e POSTGRESQL_PASSWORD=test1234 -p 5432:5432 -v postgres_data:/bitnami/postgresql -d bitnami/postgresql:$1
}

# EZA: File/Folder view switching list or grid based file count
# Hardcode the limit to 10 file & folder
# <=10 show as a list, >10 show as grid
_dynamic_view() {
    local dir_path=${1:-.}  #-- use the provided directory path, or default to the current directory
    local item_count

    #-- check if the directory exists
    if [[ ! -d "$dir_path" ]]; then
        echo "Error: '$dir_path' is not a valid directory."
        return 1
    fi

    #-- get the first 11 items and count them
    item_count=$(find "$dir_path" -maxdepth 1 -mindepth 1 | head -n 11 | wc -l)

    if (( item_count < 10 )); then
        eza -aahlom --icons --color=auto --sort=Name --group-directories-first --color-scale=all "$dir_path" # List
    else
        eza -aahloGm --icons --color=auto --sort=Name --group-directories-first --color-scale=all "$dir_path" # Grid
    fi
}

_fzf_git_branch() {
    git branch --all | fzf --preview="git log --oneline --graph {}";
}

_gen() {
    if [ $# -ne 2 ]; then
        echo "Usage: gen <laravel|vite|react> <folder_name>";
        return 1;
    fi;

    # Read parameters
    TECH_TYPE=$1
    FOLDER_NAME=$2

    # Main logic using case statement
    case "$TECH_TYPE" in
    laravel)
        echo "Initializing Laravel project in folder: $FOLDER_NAME"
        laravel new "$FOLDER_NAME"
        ;;
    vite)
        echo "Initializing Vite project in folder: $FOLDER_NAME"
        npm create vite@latest "$FOLDER_NAME"
        ;;
    react)
        echo "Initializing React Native project in folder: $FOLDER_NAME"
        mkdir -p "$FOLDER_NAME" && cd "$FOLDER_NAME" || return 1
        npx create-expo-app@latest .
        ;;
    *)
        echo "Error: Unsupported tech type '$TECH_TYPE'"
        echo "Supported types are: laravel, vite"
        return 1
        ;;
    esac
}

_git_push_new() {
  if [ -z "$1" ]; then
    echo "Usage: gitpushnew <github-repo-url>";
    return 1;
  fi;
  git init &&
  git add . &&
  git commit -m "Initial commit" &&
  git branch -M main &&
  git remote add origin "$1" &&
  git pull origin main &&
  git push -u origin main || echo "Push failed. Possibly due to conflicts or no upstream branch.";
}

_init_vite() {
  #-- set the folder name to the first parameter or the current directory if not provided
  local folder=${1:-.}

  #-- set the template to the second parameter or default to 'vue-ts'
  local template=${2:-vue-ts}

  npm create vite@latest "$folder" -- --template "$template"
}

_makedir() {
    mkdir -p "$1" && cd "$1";
}

_versions() {
    print_version() {
        local name=$1
        local cmd=$2
        local version_output

        if command -v ${cmd%% *} >/dev/null 2>&1; then
            version_output=$(eval "$cmd" 2>/dev/null)
            version_output=$(echo "$version_output" | head -n 1)
            printf "%-15s: %s\n" "$name" "$version_output"
        else
            printf "%-15s: %s\n" "$name" "Not installed"
        fi
    }

    echo "=== System & Development Tools ==="
    print_version "Bun" "bun -v"
    print_version "Express" "express --version"
    print_version "Git" "git --version"
    print_version "Go" "go version"
    print_version "NVM" "nvm -v"
    print_version "NPM" "npm -v"
    print_version "Node.js" "node -v"
    print_version "Python" "python3 --version"
    print_version "Redis CLI" "redis-cli --version"
    print_version "Rust" "rustc --version"

    echo
    echo "=== Tools for Mobile Development ==="
    print_version "ADB" "adb version"
    print_version "Cocoapods" "pod --version"
    print_version "Ionic" "ionic --version"
    print_version "React Native" "npm view react-native version"

    echo
    echo "=== PHP Development Tools ==="
    print_version "Composer" "composer --version"
}

zle -N _alias_search  # Register as a ZLE widget
bindkey '^a' _alias_search  # Bind to Ctrl+A
